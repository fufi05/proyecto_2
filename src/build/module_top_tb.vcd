$date
	Thu Apr 03 19:59:36 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module module_top_tb $end
$var wire 7 ! siete_seg_tb [6:0] $end
$var wire 4 " led_o_tb [3:0] $end
$var wire 7 # error_tb [6:0] $end
$var reg 4 $ entrada_tb [3:0] $end
$var reg 7 % palabra_tb [6:0] $end
$scope module dut $end
$var wire 4 & entrada [3:0] $end
$var wire 7 ' palabra [6:0] $end
$var wire 3 ( sindrome_d [2:0] $end
$var wire 3 ) sindrome_c [2:0] $end
$var wire 4 * siete_seg_cod [3:0] $end
$var wire 7 + siete_seg [6:0] $end
$var wire 7 , palabra_out [6:0] $end
$var wire 4 - led_o [3:0] $end
$var wire 4 . led_cod [3:0] $end
$var wire 7 / error [6:0] $end
$var wire 7 0 decodificador_in [6:0] $end
$var wire 7 1 codificador_out [6:0] $end
$var wire 1 2 bit_error_d $end
$var wire 1 3 bit_error_c $end
$scope module codificador $end
$var wire 4 4 datos_in [3:0] $end
$var wire 7 5 datos_cod [6:0] $end
$upscope $end
$scope module corrector_cod $end
$var wire 7 6 datos_recibidos [6:0] $end
$var wire 3 7 sindrome [2:0] $end
$var wire 7 8 data [6:0] $end
$upscope $end
$scope module corrector_deco $end
$var wire 7 9 datos_recibidos [6:0] $end
$var wire 3 : sindrome [2:0] $end
$var wire 7 ; data [6:0] $end
$upscope $end
$scope module deco_display $end
$var wire 7 < datos_cod [6:0] $end
$var wire 4 = datos_out [3:0] $end
$upscope $end
$scope module deco_led $end
$var wire 7 > datos_cod [6:0] $end
$var wire 4 ? datos_out [3:0] $end
$upscope $end
$scope module detector_cod $end
$var wire 1 2 bit_error $end
$var wire 7 @ datos_recibidos [6:0] $end
$var wire 3 A sindrome [2:0] $end
$upscope $end
$scope module detector_deco $end
$var wire 1 3 bit_error $end
$var wire 7 B datos_recibidos [6:0] $end
$var wire 3 C sindrome [2:0] $end
$upscope $end
$scope module display_cod $end
$var wire 4 D data [3:0] $end
$var wire 7 E display [6:0] $end
$upscope $end
$scope module error_display $end
$var wire 1 3 bit_error $end
$var wire 7 F disp_error [6:0] $end
$upscope $end
$scope module leds $end
$var wire 4 G in [3:0] $end
$var wire 4 H out [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1111 H
b0 G
b1111110 F
b1111110 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
03
02
b0 1
b0 0
b1111110 /
b0 .
b1111 -
b0 ,
b1111110 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b1111110 #
b1111 "
b1111110 !
$end
#50
02
b0 )
b0 7
b0 A
b1110 "
b1110 -
b1110 H
b110000 !
b110000 +
b110000 E
b1 *
b1 ?
b1 D
b1 .
b1 =
b1 G
b111 ,
b111 8
b111 >
b111 0
b111 ;
b111 <
b111 1
b111 5
b111 6
b111 @
b111 %
b111 '
b111 9
b111 B
b1 $
b1 &
b1 4
#100
b110000 #
b110000 /
b110000 F
02
13
b1101101 !
b1101101 +
b1101101 E
b1101 "
b1101 -
b1101 H
b0 )
b0 7
b0 A
b100 (
b100 :
b100 C
b10 *
b10 ?
b10 D
b10 .
b10 =
b10 G
b11001 ,
b11001 8
b11001 >
b11001 0
b11001 ;
b11001 <
b11001 1
b11001 5
b11001 6
b11001 @
b10001 %
b10001 '
b10001 9
b10001 B
b10 $
b10 &
b10 4
#150
b1100 "
b1100 -
b1100 H
02
b11 .
b11 =
b11 G
b11110 0
b11110 ;
b11110 <
b1111001 !
b1111001 +
b1111001 E
b0 )
b0 7
b0 A
b11 *
b11 ?
b11 D
b11110 ,
b11110 8
b11110 >
b11110 1
b11110 5
b11110 6
b11110 @
b10110 %
b10110 '
b10110 9
b10110 B
b11 $
b11 &
b11 4
#200
b1011 "
b1011 -
b1011 H
b1111110 #
b1111110 /
b1111110 F
b110011 !
b110011 +
b110011 E
b100 .
b100 =
b100 G
02
b101010 0
b101010 ;
b101010 <
03
b0 )
b0 7
b0 A
b0 (
b0 :
b0 C
b100 *
b100 ?
b100 D
b101010 ,
b101010 8
b101010 >
b101010 1
b101010 5
b101010 6
b101010 @
b101010 %
b101010 '
b101010 9
b101010 B
b100 $
b100 &
b100 4
#250
b110000 #
b110000 /
b110000 F
02
b1011011 !
b1011011 +
b1011011 E
13
b0 )
b0 7
b0 A
b1010 "
b1010 -
b1010 H
b1 (
b1 :
b1 C
b101 *
b101 ?
b101 D
b101 .
b101 =
b101 G
b101101 ,
b101101 8
b101101 >
b101101 0
b101101 ;
b101101 <
b101101 1
b101101 5
b101101 6
b101101 @
b101100 %
b101100 '
b101100 9
b101100 B
b101 $
b101 &
b101 4
#300
b1011111 !
b1011111 +
b1011111 E
02
b111 "
b111 -
b111 H
b1000 .
b1000 =
b1000 G
b0 )
b0 7
b0 A
b1001011 0
b1001011 ;
b1001011 <
b110 *
b110 ?
b110 D
b101 (
b101 :
b101 C
b110011 ,
b110011 8
b110011 >
b110011 1
b110011 5
b110011 6
b110011 @
b1011011 %
b1011011 '
b1011011 9
b1011011 B
b110 $
b110 &
b110 4
#350
b1111110 #
b1111110 /
b1111110 F
b1000 "
b1000 -
b1000 H
02
b1110000 !
b1110000 +
b1110000 E
03
b111 .
b111 =
b111 G
b110100 0
b110100 ;
b110100 <
b0 )
b0 7
b0 A
b111 *
b111 ?
b111 D
b0 (
b0 :
b0 C
b110100 ,
b110100 8
b110100 >
b110100 1
b110100 5
b110100 6
b110100 @
b110100 %
b110100 '
b110100 9
b110100 B
b111 $
b111 &
b111 4
#400
b110000 #
b110000 /
b110000 F
b1111111 !
b1111111 +
b1111111 E
13
02
b111 "
b111 -
b111 H
b111 (
b111 :
b111 C
b1000 *
b1000 ?
b1000 D
b0 )
b0 7
b0 A
b1000 .
b1000 =
b1000 G
b1001011 ,
b1001011 8
b1001011 >
b1001011 0
b1001011 ;
b1001011 <
b1001011 1
b1001011 5
b1001011 6
b1001011 @
b1011 %
b1011 '
b1011 9
b1011 B
b1000 $
b1000 &
b1000 4
#450
b1111110 #
b1111110 /
b1111110 F
b0 "
b0 -
b0 H
02
b1110011 !
b1110011 +
b1110011 E
03
b1111 .
b1111 =
b1111 G
b1111111 0
b1111111 ;
b1111111 <
b0 )
b0 7
b0 A
b1001 *
b1001 ?
b1001 D
b0 (
b0 :
b0 C
b1001100 ,
b1001100 8
b1001100 >
b1001100 1
b1001100 5
b1001100 6
b1001100 @
b1111111 %
b1111111 '
b1111111 9
b1111111 B
b1001 $
b1001 &
b1001 4
#550
